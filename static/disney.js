// Create the map
let map = L.map("map", {
    center: [33.80944534935707, -117.91977387277498],
    zoom: 16
});

// Create the title layer that will be the background of the map
let streetmap = L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
    attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
}).addTo(map);

// Load CSV file using D3.js - code generated by Xpert Learning Assistant (January 2025)
d3.csv('output_data/disney_df.csv').then(function(data){

    // Create marker for coordinates - updated with code generated by Xpert Learning Assistant (January 2025)
    let restaurantMarkers = [];
    let showsMarkers = [];
    let attractionMarkers = [];

    // Loop through each row and extract latitude and longitude from CSV file
    data.forEach(function(row){
        let lat = parseFloat(row.Latitude);
        let long = parseFloat(row.Longitude);
        console.log(row)

    // Iterate each row and process them into 3 categories - code generated by OpenAI's ChatGPT (January 2025)
        // Circle marker for RESTAURANT
        let circleMarker = L.circleMarker([lat, long],{
            radius: 10,
            color: 'blue',
            weight: 1,
            fillColor: 'darkblue',
            fillOpacity: 0.8
        }).bindTooltip(`<h4 class="popup-title">${row.Ride}</h4><hr>
                        <p class="popup-info">${row.Entity}</p>`, {permanent: false, sticky:true});

        // Triangle marker for SHOW
        let triangleMarker = L.marker([lat, long],{
            icon: L.divIcon({
                className: 'triangle-marker'
            })
        }).bindTooltip(`<h4 class="popup-title">${row.Ride}</h4><hr>
                        <p class="popup-info">${row.Entity}</p>`, {permanent: false, sticky:true});
        
        // Star marker for ATTRACTION
        let starMarker = L.marker([lat, long], {
            icon: L.divIcon({
                className: 'star-marker'
            })
        }).bindTooltip(`<h4 class="popup-title">${row.Ride}</h4><hr>
                        <p class="popup-info">${row.Entity}</p>`, {permanent: false, sticky:true});

        // Categorize markers - code generated by Xpert Learning Assistant (January 2025)
        if (row.Entity === "RESTAURANT"){
            restaurantMarkers.push(circleMarker);
        } else if (row.Entity === "SHOW"){
            showsMarkers.push(triangleMarker);
        } else if (row.Entity === "ATTRACTION"){
            attractionMarkers.push(starMarker);
        }
    });

    // Add show markers to map - code generated by Xpert Learning Assistant (January 2025)
    function showMarkers(markers){
        markers.forEach(marker => marker.addTo(map));
    }

    // Add hide markers to map - code generated by Xpert Learning Assistant (January 2025)
    function hideMarkers(markers){
        markers.forEach(marker => map.removeLayer(marker));
    }

    // Add event listeners to select dropdown - code generated by Xpert Learning Assistant (January 2025)
    document.getElementById("filter-select").addEventListener("change", function(event){

        // Select option using dropdown
        const selectedOption = event.target.value;

        // Hide markers
        hideMarkers(restaurantMarkers);
        hideMarkers(showsMarkers);
        hideMarkers(attractionMarkers);

        // Show markers based on selection
        if (selectedOption === "restaurants"){
            showMarkers(restaurantMarkers);
        } else if (selectedOption === "shows"){
            showMarkers(showsMarkers);
        } else if (selectedOption === "attractions"){
            showMarkers(attractionMarkers);
        } else if (selectedOption === "all"){
            showMarkers(restaurantMarkers);
            showMarkers(showsMarkers);
            showMarkers(attractionMarkers);
        }
    });

    // Show all markers when page loads
    showMarkers(restaurantMarkers);
    showMarkers(showsMarkers);
    showMarkers(attractionMarkers);
});
